//
//  ViewController.swift
//  AudioPlayer_Review
//
//  Created by swuad_05 on 24/12/2019.
//  Copyright © 2019 swuad_05. All rights reserved.
//

import UIKit
import AVFoundation

class ViewController: UIViewController, AVAudioPlayerDelegate {

    @IBOutlet weak var playPauseButton: UIButton!
    @IBOutlet weak var playPauseButton2: UIButton!
    @IBOutlet weak var playPauseButton3: UIButton!
    @IBOutlet weak var timeLable: UILabel!
    @IBOutlet weak var progressSlider: UISlider!
    
    var player:AVAudioPlayer!
    var timer:Timer!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.initializePlayer("music")
        //버튼 3개 만들기 / 버튼-노래 1곡 연결 / 버튼 누르면 해당하는 곡과 함께 초기화플레이어 호출
        //IB에서 버튼 추가 / 버튼의 ibacition 생성
        
    }
    
    func initializePlayer(_ music_name:String)
    {
        
        guard let soundAsset:NSDataAsset = NSDataAsset(name: music_name) else {
            print("음원 없음")
            return
        }
        
        do
        {
            try self.player = AVAudioPlayer(data: soundAsset.data)
            self.player.delegate = self
        }
        catch let error as NSError
        {
            print("플레이어 초기화 오류")
            print("코드 \(error.code), 메시지 \(error.localizedDescription)")
        }
        
        self.timeLable.text = "00:00:00"
        self.progressSlider.maximumValue = Float(self.player.duration)
        self.progressSlider.minimumValue = 0
        self.progressSlider.value = Float(self.player.currentTime)
        
    }
    
    func totalTimeText()
    {
        let minute = Int(self.player.duration/60)
        let second = Int(self.player.duration.truncatingRemainder(dividingBy: 60))
        let milisecond = Int((self.player.duration).truncatingRemainder(dividingBy: 1)*100)
        let timeText:String = String(format:"%02ld:%02ld:%02ld", minute, second, milisecond)
        self.timeLable.text = timeText
    }
    
    func updateTimeLableText(with time: TimeInterval)
    {
        let minute:Int = Int(time/60)
        let second:Int = Int(time.truncatingRemainder(dividingBy: 60))
        let milisecond:Int = Int(time.truncatingRemainder(dividingBy: 1)*100)
        
        let timeText:String = String(format:"%02ld:%02ld:%02ld", minute, second, milisecond)
        
        self.timeLable.text = timeText
        
        
    }
    
    func makeAndFireTimer()
    {
        self.timer = Timer.scheduledTimer(withTimeInterval: 0.01, repeats: true, block: {
            [unowned self] (timer:Timer) in
            if self.progressSlider.isTracking { return }
            self.updateTimeLableText(with: self.player.currentTime)
            self.progressSlider.value = Float(self.player.currentTime)
        })
        self.timer.fire()
    }
    
    func invalidateTimer()
    {
        self.timer.invalidate()
        self.timer = nil
    }
    
    @IBAction func img(_ sender: UIButton)
    {
        sender.isSelected = !sender.isSelected
        
        if sender.isSelected
        {
            self.player?.play()
            self.makeAndFireTimer()
        }
        else
        {
            self.player?.pause()
            self.invalidateTimer()
            self.totalTimeText()
        }
    }
    
    @IBAction func btnTouch(_ sender: UIButton)
    {
        //self.totalTimeText()
        self.initializePlayer("music")
        
    }
    
    @IBAction func btnTouch2(_ sender: UIButton)
    {
        self.initializePlayer("music2")
        
    }
    
    @IBAction func btnTouch3(_ sender: UIButton)
    {
        self.initializePlayer("music3")
    }
    
    
    func audioPlayerDidFinishPlaying(_ player: AVAudioPlayer, successfully flag: Bool) {
        self.playPauseButton.isSelected = false
        self.progressSlider.value = 0
        self.updateTimeLableText(with: 0)
        self.invalidateTimer()
    }
    
    @IBAction func sliderValueChanged(_ sender: UISlider)
    {
        self.updateTimeLableText(with: TimeInterval(exactly: sender.value)!)
        if sender.isTracking { return }
        self.player.currentTime = TimeInterval(sender.value)
    }
    
    
    
    
}

