//
//  ViewController.swift
//  AudioPlayer
//
//  Created by swuad_05 on 23/12/2019.
//  Copyright © 2019 swuad_05. All rights reserved.
//

import UIKit
import AVFoundation

class ViewController: UIViewController, AVAudioPlayerDelegate {
    
    @IBOutlet weak var playPauseButton: UIButton!
    @IBOutlet weak var timeLable: UILabel!
    @IBOutlet weak var progressSlider: UISlider!
    
    var player:AVAudioPlayer!
    var timer:Timer!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        self.initializePlayer()
        
        
    }
    
    func initializePlayer()
    {
        guard let soundAsset:NSDataAsset = NSDataAsset(name: "music") else
        {
            print("음원 없음")
            return
        }
        
        do
        {
            try self.player = AVAudioPlayer(data: soundAsset.data)
            self.player.delegate = self
        }
        catch let error as NSError
        {
            print("플레이어 초기화 오류")
            print("코드 \(error.code), 메시지 \(error.localizedDescription)")
        }
        
        self.timeLable.text = "00:00:00"
        self.progressSlider.maximumValue = Float(self.player.duration)
        self.progressSlider.minimumValue = 0
        self.progressSlider.value = Float(self.player.currentTime)
    }
    
    func updateTimeLableText(with time:TimeInterval)
    {
        let minute:Int = Int(time/60)
        let second:Int = Int(time.truncatingRemainder(dividingBy: 60))
        let milisecond:Int = Int(time.truncatingRemainder(dividingBy: 1)*100)
        
        let timeText:String = String(format:"%02ld:%02ld:%02ld", minute, second, milisecond)
        self.timeLable.text = timeText
    }
    
    func makeAndFireTimer()
    {
        self.timer = Timer.scheduledTimer(withTimeInterval: 0.01, repeats: true, block:
            {
                [unowned self] (timer:Timer) in
            if self.progressSlider.isTracking { return }
            self.updateTimeLableText(with: self.player.currentTime)
            self.progressSlider.value = Float(self.player.currentTime)
        })
        self.timer.fire()
    }
    
    func invalidateTimer()
    {
        self.timer.invalidate()
        self.timer = nil
    }
    
    
    @IBAction func btnTouch(_ sender: UIButton) {
        sender.isSelected = !sender.isSelected
        if sender.isSelected
        {
            self.player?.play()
            self.makeAndFireTimer()
        }
        else
        {
            self.player?.pause()
            self.invalidateTimer()
        }
        
    }
    
    @IBAction func sliderValueChanged(_ sender: UISlider) {
        //NSLog("\(sender.value)")
        self.updateTimeLableText(with: TimeInterval(exactly: sender.value)!)
        if sender.isTracking { return }
        self.player.currentTime = TimeInterval(sender.value)
    }
    

}
